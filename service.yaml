#API open API version
swagger: '2.0'

#this is document metadata
info:
  version: "1.0.0"
  title: Swagger Petstore

host: petstore.swagger.io
basePath: /v2
schemes:
  - https
  - http

tags:
  - name: pet
    description: Everything about your pets

#WEndpoints Requested
paths:
  /pet:
    # first is post
    post:
      tags:
        - pet
      summary: Add a new pet to the store
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      #query params
      parameters:
        - name: body
          in: body
          description: Pet object that needs to be added to the store
          required: true
          schema:
            $ref: '#/definitions/Pet'
      responses:
        405:
          description: Invalid input
      security:
        - petstore_auth
    #then is put
    put:
      tags:
        - pet
      summary: Update an existing pet
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      parameters:
        - name: body
          in: body
          description: Pet object that needs to be added to the store
          required: true
          type: array
          items:
            enum:
              0: available
              1: pending
              2: sold
            default: available
          collectionFormat: multi
          schema:
            $ref: '#/definitions/Pet'
      security:
        - petstore_auth
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Pet not found
        405:
          description: Validation exception
  /pet/findbyStatus:
    get:
      tags:
        - pet
      summary: Find pets by status
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          schema:
            $ref: '#/definitions/Pet'
      security:
        - petstore_auth
      responses:
        200:
          description: successful operation
          example: |
            <?xml version="1.0" encoding="UTF-8"?>
            <!-- XML example cannot be generated; root element name is undefined -->
        400:
          description: Invalid status value
  /pet/findbyTags:
    get:
      deprecated: true
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      tags:
        - pet
      summary: Find pets by Tags
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: true
          schema:
            $ref: '#/definitions/Pet'
      security:
        - petstore_auth
      responses:
        200:
          description: successful operation
          example: |
            <?xml version="1.0" encoding="UTF-8"?>
            <!-- XML example cannot be generated; root element name is undefined -->
        400:
          description: Invalid status value
  /pet/{petId}:
    get:
      tags:
        - pet
      summary: Find pet by Id
      description: returns a single pet
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      parameters:
        - name: petId
          in: path
          description: Id of pet to return
          required: true
          type: integer
          format: int64

      security:
        - petstore_auth
      responses:
        200:
          description: successful operation
          example: |
            <?xml version="1.0" encoding="UTF-8"?>
            <Pet>
              <id>0</id>
              <Category>
                <id>0</id>
                <name>string</name>
              </Category>
              <name>doggie</name>
              <photoUrl>
                <photoUrl>string</photoUrl>
              </photoUrl>
              <tag>
                <Tag>
                  <id>0</id>
                  <name>string</name>
                </Tag>
              </tag>
              <status>available</status>
            </Pet>
        400:
          description: Invalid ID supplied
        404:
          description: Pet not found
    post:
      tags:
        - pet
      summary: Updates a pet in the store with form data
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - application/json
        - application/xml
      #query params
      parameters:
        - name: petId
          in: path
          description: ID of pet that needs to be updated
          required: true
          type: integer
          format: int64
        - name: name
          in: formData
          description: Updated name of the pet
          required: false
          type: string
        - name: status
          in: formData
          description: Updated status of the pet
          required: false
          type: string
      responses:
        405:
          description: Invalid input
      security:
        - petstore_auth
    delete:
      tags:
        - pet
      summary: Deletes a pet
      produces:
        - application/json
        - application/xml
      #query params
      parameters:
        - name: api_key
          in: header
          required: false
          type: string
        - name: petId
          in: path
          description: Pet Id to delete
          required: true
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Pet not found
      security:
        - api_key
  /pet/{petId}/uploadImage:
    post:
      tags:
        - pet
      summary: Uploads an image
      consumes:
        - "multipart/form-data"
      produces:
        - application/json
      #query params
      parameters:
        - name: petId
          in: path
          description: ID of pet to update
          required: true
          type: integer
          format: int64
        - name: additionalMetadata
          in: formData
          description: Additional data to pass to server
          required: false
          type: string
        - name: file
          in: formData
          description: file to upload
          required: false
          type: file
      responses:
        200:
          description: Successful operation
          schema:
            $ref: '#/definitions/ApiResponse'

      security:
        - petstore_auth



securityDefinitions:
  petstore_auth:
    type: oauth2
    authorizationUrl: https://petstore.swagger.io/oauth/authorize
    flow: implicit
    scopes:
      write:pets: modify pets in your account
      read:pets: read your pets.
  api_key:
    type: apiKey
    name: api_key
    in: header #must add it to each call for it to work.

definitions:
  Order:
    properties:
      id:
        type: integer
        format: int64
      petId:
        type: integer
        format: int64
      quantity:
        type: integer
        format: int32
      shipDate:
        type: string
        format: date-time
      status:
        type: string
        description: Order Status
        enum:
          0: placed
          1: approved
          2: delivered
      complete:
        type: boolean

  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      userStatus:
        type: integer
        format: int32
        description: User Status

  Category:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
  Tag:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
  Pet:
    type: object
    properties:
      id:
        type: integer
        format: int64
      category:
        $ref: '#/definitions/Category'
        name:
          type: string
          example: doggie
        #formatting needs revision
      photoUrls:
        type: array
        xml:
          name: photoURL
          wrapped: true
        items:
          type: string
          #see https://github.com/swagger-api/swagger-ui/issues/3954
      tags:
        type: array
        xml:
          name: tag
          wrapped: true
        items:
          $ref: '#/definitions/Tag'
      status:
        type: string
        description: pet status in the store
        enum:
          0: available
          1: pending
          2: sold
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string

